// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  headers   String?
  authToken String?
  password  String
  salt      String?
  createdAt DateTime @default(now())

  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@map("users")
}

model Student {
  id        String     @id @default(uuid())
  standard  Std
  roll      Roll       @default(STUDENT)
  email     String     @unique
  password  String
  salt      String?
  phone     BigInt     @unique
  name      String
  sirname   String
  imageUrl  String?
  dob       DateTime?
  boardName String
  city      String
  state     String
  subject   Subject[]
  chats     Chats[]
  lecture   Lectures[]
  payment   Payment[]
  user      User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId String?

  @@map("student")
}

model Payment {
  id        String   @id @default(uuid())
  isPaid    Boolean  @default(false)
  isPending Boolean  @default(false)
  createdAt DateTime @default(now())

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?

  @@map("payment")
}

model Subject {
  id          String   @id @default(uuid())
  title       String   @unique
  price       Int
  description String?
  isEnrolled  Boolean  @default(false)
  student     Student? @relation(fields: [studentID], references: [id])
  studentID   String?

  faculty   Faculty @relation(fields: [FacultyID], references: [id])
  FacultyID String
  Admin     Admin?  @relation(fields: [adminId], references: [id])
  adminId   String?

  @@index([studentID])
  @@index([FacultyID])
  @@map("subject")
}

model Lectures {
  id String @id @default(uuid())

  student   Student? @relation(fields: [studentID], references: [id])
  studentID String?

  title      String
  lectureUrl String
  notes      String?
  contents   String

  createdAt DateTime @default(now())
  Faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId String?
  admin     Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?

  @@index([studentID])
  @@index([facultyId])
  @@map("lectures")
}

model Chats {
  id String @id @default(uuid())

  studentMessage String?
  facultyMessage String?
  student        Student? @relation(fields: [studentMessage], references: [id])
  faculty        Faculty? @relation(fields: [facultyMessage], references: [id])

  text     String?
  imageUrl String?
  videoUrl String?
  audioUrl String?
  fileUrl  String?
  read     Boolean @default(false)
  isSend   Boolean @default(false)

  createdAt DateTime @default(now())
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?

  @@index([studentMessage])
  @@index([facultyMessage])
  @@map("chats")
}

model Faculty {
  id       String @id @default(uuid())
  email    String @unique
  name     String
  sirname  String
  password String
  salt     String
  vision   String
  exp      String
  role     Roll   @default(FACULTY)

  student      Student[]
  subject      Subject[]
  chats        Chats[]
  lecture      Lectures[]
  notification Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?

  @@map("faculty")
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  isSend    Boolean  @default(false)

  faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId String?

  admin   Admin?  @relation(fields: [adminId], references: [id])
  adminId String?

  @@map("notification")
}

model Admin {
  id   String @id @default(uuid())
  name String
  roll Roll   @default(ADMIN)

  payment      Payment[]
  chats        Chats[]
  faculty      Faculty[]
  subject      Subject[]
  lecture      Lectures[]
  notification Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

enum Std {
  FirstStandard
  SecondStandard
  ThirdStandard
  FourthStandard
  FifthStandard
  SixthStandard
  SeventhStandard
  EightStandard
  NithStandard
  tenthStandard
}

enum Roll {
  STUDENT
  FACULTY
  ADMIN
}
