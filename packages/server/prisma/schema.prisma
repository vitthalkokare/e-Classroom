generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  password  String?
  sid       String?
  sub       String?
  role      Roll
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student?

  @@map("user")
}

model Student {
  id        String     @id @default(uuid())
  roll      Roll       @default(STUDENT)
  email     String     @unique
  standard  Class?
  phone     String    @unique
  name      String?
  gender    Gender?
  sirname   String?
  imageUrl  String?
  dob       DateTime?
  boardName String?
  city      String?
  state     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  chats     Chats[]
  lecture   Lectures[]
  payment   Payment[]
  subject   Subject[]
  user      User?      @relation(fields: [userId], references: [id])

  userId    String   @unique
  Faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId String?

  @@map("student")
}

model Payment {
  id        String   @id @default(uuid())
  isPaid    Boolean  @default(false)
  isPending Boolean  @default(false)
  createdAt DateTime @default(now())
  studentId String?
  adminId   String?
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  student   Student? @relation(fields: [studentId], references: [id])

  @@map("payment")
}

model Subject {
  id          String   @id @default(uuid())
  title       String   @unique
  price       Int
  description String?
  isEnrolled  Boolean  @default(false)
  adminId     String?
  admin       Admin?   @relation(fields: [adminId], references: [id])
  facultyId   String?
  Faculty     Faculty? @relation(fields: [facultyId], references: [id])
  studentId   String?
  student     Student? @relation(fields: [studentId], references: [id])

  @@map("subject")
}

model Lectures {
  id         String   @id @default(uuid())
  studentID  String?
  title      String
  lectureUrl String
  notes      String?
  contents   String
  createdAt  DateTime @default(now())
  facultyId  String?
  Faculty    Faculty? @relation(fields: [facultyId], references: [id])
  student    Student? @relation(fields: [studentID], references: [id])
  adminId    String?
  admin      Admin?   @relation(fields: [adminId], references: [id])

  @@index([studentID])
  @@index([facultyId])
  @@map("lectures")
}

model Chats {
  id             String   @id @default(uuid())
  studentMessage String?
  facultyMessage String?
  text           String?
  imageUrl       String?
  videoUrl       String?
  audioUrl       String?
  fileUrl        String?
  read           Boolean  @default(false)
  isSend         Boolean  @default(false)
  createdAt      DateTime @default(now())
  adminId        String?
  Admin          Admin?   @relation(fields: [adminId], references: [id])
  faculty        Faculty? @relation(fields: [facultyMessage], references: [id])
  student        Student? @relation(fields: [studentMessage], references: [id])

  @@index([studentMessage])
  @@index([facultyMessage])
  @@map("chats")
}

model Faculty {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String
  sirname      String
  password     String
  salt         String
  vision       String
  exp          String
  role         Roll           @default(FACULTY)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  adminId      String?
  chats        Chats[]
  Admin        Admin?         @relation(fields: [adminId], references: [id])
  lecture      Lectures[]
  notification Notification[]
  student      Student[]
  subject      Subject[]

  @@map("faculty")
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  isSend    Boolean  @default(false)
  facultyId String?
  adminId   String?
  admin     Admin?   @relation(fields: [adminId], references: [id])
  faculty   Faculty? @relation(fields: [facultyId], references: [id])

  @@map("notification")
}

model Admin {
  id           String         @id @default(uuid())
  name         String
  roll         Roll           @default(ADMIN)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  chats        Chats[]
  faculty      Faculty[]
  lecture      Lectures[]
  notification Notification[]
  payment      Payment[]
  subject      Subject[]

  @@map("admin")
}

enum Class {
  Class1  @map("1st Class")
  Class2  @map("2nd Class")
  Class3  @map("3rd Class")
  Class4  @map("4th Class")
  Class5  @map("5th Class")
  Class6  @map("6th Class")
  Class7  @map("7th Class")
  Class8  @map("8th Class")
  Class9  @map("9th Class")
  Class10 @map("10th Class")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Roll {
  STUDENT
  FACULTY
  ADMIN
  USER
  AUTH0
}
