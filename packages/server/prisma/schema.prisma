generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  headers   String?
  authToken String?
  password  String?
  role      Roll     @default(USER)
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  @@index([studentId])
  @@map("user")
}

model Student {
  id        String     @id @default(uuid())
  roll      Roll
  email     String    @unique
  standard  Std?
  phone     BigInt     @unique
  name      String
  sirname   String
  imageUrl  String?
  dob       DateTime?
  boardName String?
  city      String
  state     String
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  chats     Chats[]
  lecture   Lectures[]
  payment   Payment[]
  subject   Subject[]

  Faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId String?
  User      User[]

  @@map("student")
}

model Payment {
  id        String   @id @default(uuid())
  isPaid    Boolean  @default(false)
  isPending Boolean  @default(false)
  createdAt DateTime @default(now())
  studentId String?
  adminId   String?
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  student   Student? @relation(fields: [studentId], references: [id])

  @@map("payment")
}

model Subject {
  id          String   @id @default(uuid())
  title       String   @unique
  price       Int
  description String?
  isEnrolled  Boolean  @default(false)
  studentID   String?
  FacultyID   String
  adminId     String?
  faculty     Faculty  @relation(fields: [FacultyID], references: [id])
  Admin       Admin?   @relation(fields: [adminId], references: [id])

  @@index([studentID])
  @@index([FacultyID])
  @@map("subject")
}

model Lectures {
  id         String   @id @default(uuid())
  studentID  String?
  title      String
  lectureUrl String
  notes      String?
  contents   String
  createdAt  DateTime @default(now())
  facultyId  String?
  adminId    String?
  admin      Admin?   @relation(fields: [adminId], references: [id])
  Faculty    Faculty? @relation(fields: [facultyId], references: [id])
  student    Student? @relation(fields: [studentID], references: [id])

  @@index([studentID])
  @@index([facultyId])
  @@map("lectures")
}

model Chats {
  id             String   @id @default(uuid())
  studentMessage String?
  facultyMessage String?
  text           String?
  imageUrl       String?
  videoUrl       String?
  audioUrl       String?
  fileUrl        String?
  read           Boolean  @default(false)
  isSend         Boolean  @default(false)
  createdAt      DateTime @default(now())
  adminId        String?
  Admin          Admin?   @relation(fields: [adminId], references: [id])
  faculty        Faculty? @relation(fields: [facultyMessage], references: [id])
  student        Student? @relation(fields: [studentMessage], references: [id])

  @@index([studentMessage])
  @@index([facultyMessage])
  @@map("chats")
}

model Faculty {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String
  sirname      String
  password     String
  salt         String
  vision       String
  exp          String
  role         Roll           @default(FACULTY)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  adminId      String?
  chats        Chats[]
  Admin        Admin?         @relation(fields: [adminId], references: [id])
  lecture      Lectures[]
  notification Notification[]
  student      Student[]
  subject      Subject[]

  @@map("faculty")
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  isSend    Boolean  @default(false)
  facultyId String?
  adminId   String?
  admin     Admin?   @relation(fields: [adminId], references: [id])
  faculty   Faculty? @relation(fields: [facultyId], references: [id])

  @@map("notification")
}

model Admin {
  id           String         @id @default(uuid())
  name         String
  roll         Roll           @default(ADMIN)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  chats        Chats[]
  faculty      Faculty[]
  lecture      Lectures[]
  notification Notification[]
  payment      Payment[]
  subject      Subject[]

  @@map("admin")
}

enum Std {
  FirstStandard
  SecondStandard
  ThirdStandard
  FourthStandard
  FifthStandard
  SixthStandard
  SeventhStandard
  EightStandard
  NithStandard
  tenthStandard
}

enum Roll {
  STUDENT
  FACULTY
  ADMIN
  USER
}
