generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique @default(uuid()) @map("id")
  email     String   @unique @map("email")
  password  String?  @map("password")
  sid       String?  @map("sid")
  sub       String?  @map("sub")
  role      Roll     @map("role")
  salt      String   @map("salt")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  student   Student?
}

model Student {
  id         String     @id @default(uuid()) @map("id")
  roll       Roll       @default(STUDENT) @map("roll")
  email      String     @unique @map("email")
  standard   Class      @map("standard")
  phone      String     @unique @map("phone")
  name       String     @map("name")
  gender     Gender     @map("gender")
  sirname    String     @map("sirname")
  imageUrl   String?    @map("image_url")
  dob        DateTime?  @map("dob")
  boardName  String     @map("board_name")
  city       String     @map("city")
  state      String     @map("state")
  info       Json?      @map("info")
  sid        String?    @map("sid")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime?  @updatedAt @map("updated_at")
  classlabel String     @map("class_label")
  userId     String     @unique @map("user_id")
  facultyId  String?    @map("faculty_id")
  chats      Chats[]
  lecture    Lectures[]
  payment    Payment[]
  classroom  Classroom  @relation(fields: [classlabel], references: [label])
  Faculty    Faculty?   @relation(fields: [facultyId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  subject    Subject[]
}

model Payment {
  id            String        @id @unique @default(uuid()) @map("id")
  Paystatus     Boolean       @default(false) @map("pay_status")
  Paidstatus    PaymentStatus @map("paid_status")
  createdAt     DateTime      @default(now()) @map("created_at")
  info          String?       @map("info")
  paymentMethod PaymentType   @map("payment_method")
  studentId     String?       @map("student_id")
  student       Student?      @relation(fields: [studentId], references: [id])
  subject       Subject[]
}

model Subject {
  id            String       @id @unique @default(uuid()) @map("id")
  title         String       @map("title")
  price         Int          @map("price")
  about         String?      @map("about")
  img           String?      @map("img")
  state         String       @map("state")
  boardLebel    String       @map("board_lebel")
  isEnroll      Enrollstatus @map("is_enroll")
  subjectDataId String       @map("subject_data_id")
  studentId     String?      @map("student_id")
  PaymentId     String?      @map("payment_id")
  adminId       String?      @map("admin_id")
  classlebel    String
  admin         Admin?       @relation(fields: [adminId], references: [id])
  payment       Payment?     @relation(fields: [PaymentId], references: [id])
  student       Student?     @relation(fields: [studentId], references: [id])

  @@unique([title, studentId])
  @@map("subject")
}

model Lectures {
  id         String   @id @default(uuid())
  studentID  String?  @map("student_id")
  title      String   @map("title")
  lectureUrl String   @map("lecture_url")
  notes      String?
  contents   String
  createdAt  DateTime @default(now()) @map("created_at")
  facultyId  String?  @map("faculty_id")
  adminId    String?  @map("admin_id")
  admin      Admin?   @relation(fields: [adminId], references: [id])
  Faculty    Faculty? @relation(fields: [facultyId], references: [id])
  student    Student? @relation(fields: [studentID], references: [id])
}

model Chats {
  id             String   @id @default(uuid())
  studentMessage String?  @map("student_message")
  facultyMessage String?  @map("faculty_message")
  text           String?  @map("text")
  imageUrl       String?  @map("image_url")
  videoUrl       String?  @map("video_url")
  audioUrl       String?  @map("audio_url")
  fileUrl        String?  @map("file_url")
  read           Boolean  @default(false)
  isSend         Boolean  @default(false) @map("is_send")
  createdAt      DateTime @default(now()) @map("created_at")
  adminId        String?  @map("admin_id")
  Admin          Admin?   @relation(fields: [adminId], references: [id])
  faculty        Faculty? @relation(fields: [facultyMessage], references: [id])
  student        Student? @relation(fields: [studentMessage], references: [id])
}

model Faculty {
  id               String         @id @default(uuid())
  email            String         @unique @map("email")
  name             String         @map("name")
  sirname          String         @map("sirname")
  password         String         @map("password")
  secretKey        String?        @map("secret_key")
  salt             String         @map("salt")
  role             Roll           @default(FACULTY)
  exp              String?        @map("exp")
  vision           String?        @map("vision")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  adminId          String?        @map("admin_id")
  classlabel       String?
  chats            Chats[]
  Admin            Admin?         @relation(fields: [adminId], references: [id])
  classroom        Classroom?     @relation(fields: [classlabel], references: [label])
  lecture          Lectures[]
  notification     Notification[]
  student          Student[]
  alocated_subject SubjectData[]
}

model Notification {
  id        String   @id @default(uuid()) @map("id")
  message   String   @map("message")
  createdAt DateTime @default(now()) @map("created_at")
  read      Boolean  @default(false) @map("read")
  isSend    Boolean  @default(false) @map("is_send")
  facultyId String?  @map("faculty_id")
  adminId   String?  @map("admin_id")
  admin     Admin?   @relation(fields: [adminId], references: [id])
  faculty   Faculty? @relation(fields: [facultyId], references: [id])
}

model Admin {
  id           String         @id @default(uuid()) @map("id")
  email        String         @unique @map("email")
  password     String         @map("password")
  salt         String         @map("salt")
  secretKey    String         @map("secret_key")
  name         String         @map("name")
  roll         Roll           @default(ADMIN)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  chats        Chats[]
  faculty      Faculty[]
  lecture      Lectures[]
  notification Notification[]
  subject      Subject[]
  subjectdata  SubjectData[]
}

model SubjectData {
  id           String    @id @default(uuid())
  price        Int
  state        String
  boardName    String    @map("board_name")
  standard     Class
  title        String
  about        String
  info         Json?
  img          String?
  vision       String?
  exp          String?
  fname        String?
  facultyEmail String    @map("faculty_email")
  classlabel   String
  adminId      String?   @map("admin_id")
  lectureTime  String    @map("lecture_time")
  admin        Admin?    @relation(fields: [adminId], references: [id])
  classroom    Classroom @relation(fields: [classlabel], references: [label])
  faculty      Faculty   @relation(fields: [facultyEmail], references: [email])

  @@unique([title, classlabel, boardName, state])
  @@map("subject_data")
}

model Classroom {
  id          Int           @id @default(autoincrement())
  label       String        @unique
  faculty     Faculty[]
  students    Student[]
  subjectdata SubjectData[]
}

enum PaymentType {
  DebitCard
  CreditCard
  NetBanking
  UPI
}

enum Class {
  Class1  @map("1st_Class")
  Class2  @map("2nd_Class")
  Class3  @map("3rd_Class")
  Class4  @map("4th_Class")
  Class5  @map("5th_Class")
  Class6  @map("6th_Class")
  Class7  @map("7th_Class")
  Class8  @map("8th_Class")
  Class9  @map("9th_Class")
  Class10 @map("10th_Class")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Roll {
  STUDENT
  FACULTY
  ADMIN
  USER
  AUTH0
}

enum PaymentStatus {
  Successful
  Pending
  Cancelled
}

enum Enrollstatus {
  Success
  Pending
}
